objective 10 : 代碼倉庫 : 設定gitolite

首先安裝gitolite套件
到終端機執行
$ sudo -i
# apt-get update -y
# apt-get install -y gitolite


剛才安裝gitolite套件的時候，由於git是依賴套件
所以會自動一起裝上，執行以下的指令
看看系統裡是不是已經安裝好了git
# which git
# git --version


切換回aruntu用戶身分，設定user.name和user.email
# exit
$ git config --global user.name aruntu
$ git config --global user.email aruntu@localhost


剛才設定的user.name和user.email存在這裡
$ git config --list
$ cat ~/.gitconfig


還記得稍早前設定ssh server的時候，
我們為用戶aruntu產生了一對RSA key pair嗎？
/home/aruntu/.ssh/id_rsa
/home/aruntu/.ssh/id_rsa.pub


如果用戶aruntu還沒產生RSA key pair
可以用這裡的指令產生，如果已經有了RSA key pair，請跳過此步驟
$ cd /home/aruntu
$ mkdir .ssh
$ chmod 700 .ssh
$ ssh-keygen -t rsa -C aruntu@192.168.0.161 -N "" -f .ssh/id_rsa


新增一個git用戶，密碼隨便設定，我設定成和帳戶一樣是git
$ sudo -i
# adduser --gecos Git git


把aruntu用戶的public key
複製到git用戶的家目錄下，並更名為admin.pub
# cp /home/aruntu/.ssh/id_rsa.pub /home/git/admin.pub


admin.pub的持有人和群組都是git用戶
# chown git:git /home/git/admin.pub


我的筆記型電腦上的預設用戶名是anntony
我已經為它產生了一對RSA key pair
路徑在
/home/anntony/.ssh/id_rsa
/home/anntony/.ssh/id_rsa.pub
我現在要把public key複製到CubieTruck機器上的/home/aruntu目錄裡
還記得我的/home/anntony/.ssh/config
有這5行設定嗎？
Host mycubie
  HostName 192.168.0.161
  User aruntu
  Port 22
  IdentityFile /home/anntony/.ssh/private_key_from_cubie

因為有上面這5行設定
所以回到筆記型電腦上，我可以直接下這樣的指令，
把用戶anntony的public key複製到CubieTruck機器的/home/aruntu目錄，並更名為anntony.pub
# scp /home/anntony/.ssh/id_rsa.pub mycubie:anntony.pub

如果你的/home/YOURS_username/.ssh/config
沒有類似的設定
那麼你也可以把本機的public key複製到CubieTruck機器的/home/aruntu目錄裡，
只是你要下的指令比較長，如下
# scp -P 22 -i /home/anntony/.ssh/private_key_from_cubie /home/anntony/.ssh/id_rsa.pub aruntu@192.168.0.161:anntony.pub


上面的指令，使用了Port 22
RSA private key檔案指定為/home/anntony/.ssh/private_key_from_cubie
然後把（筆記型電腦上的）來源檔/home/anntony/.ssh/id_rsa.pub
複製到192.168.0.161機器（CubieTruck）上的aruntu帳號的家目錄下
並更名為anntony.pub
為什麼要複製到aruntu帳號的家目錄/home/aruntu下面
因為剛才在CubieTruck機器上，我們把
/home/aruntu/.ssh/id_rsa.pub
複製到
/home/git/admin.pub
我這樣作的用意是讓aruntu用戶變成CubieTruck機器上面所有git repositories的最高領導人
（抱歉我國文造詣很爛）
aruntu現在是CubieTruck機器上安裝的gitolite套件所認定的代碼倉庫管理員
而anntony.pub這支公鑰，就代表了某個要使用git repositories的一般用戶
這個一般用戶的公鑰當然是交給aruntu用戶（最高管理員、最高領導人、大統領、隨便啦~！）


還是在CubieTruck機器上
切換成git用戶
# su - git

查看一下家目錄/home/git
會看到admin.pub這一支public key
$ cd /home/git
$ ls -al

執行gl-setup設定管理員的公鑰是admin.pub
$ gl-setup admin.pub
不要忘了CubieTruck機器上的/home/git/admin.pub
和CubieTruck機器上的/home/aruntu/.ssh/id_rsa.pub
是同一把公鑰

上面的指令
$ gl-setup admin.pub
執行之後
會強制打開vi editor
請不要隨便修改這個組態檔
直接:w按ENTER
再:q按ENTER離開即可


終端機輸出的訊息如下
$ gl-setup admin.pub 
The default settings in the rc file (/home/git/.gitolite.rc) are fine for most
people but if you wish to make any changes, you can do so now.

hit enter...
creating gitolite-admin...
Initialized empty Git repository in /home/git/repositories/gitolite-admin.git/
creating testing...
Initialized empty Git repository in /home/git/repositories/testing.git/
[master (root-commit) c433d9a] start
 2 files changed, 6 insertions(+)
 create mode 100644 conf/gitolite.conf
 create mode 100644 keydir/admin.pub

現在關於gitolite都已經設定好了
以後要控管git repositories
請用git用戶權限，在/home/git/repositories目錄下面產生bare repository
具體作法如下，現在我們在CubieTruck機器上，還是保持git用戶身分
使用下列指令，在/home/git/repositories目錄下
產生一個abc.git的bare repository
（再次強調，我現在是git用戶別忘了）
$ git init /home/git/repositories/abc.git


現在一個空白的代碼倉庫abc已經建立了
可是還沒有設定權限
設定權限的地方在CubieTruck機器上的
/home/git/repositories/gitolite-admin.git
這個目錄裡
這個目錄是一個git bare repository
所以你必須先在某個地方，把它clone到本地端（筆記型電腦或CubieTruck上面都行）
然後對著那個clone來的non-bare git repository作提交
再push回原來的bare repository（也就是/home/git/repositories/gitolite-admin.git）
要這樣才算作好gitolite的權限設定

實際操作一下
（我現在人在CubieTruck機器上，以aruntu身份登入終端機）

確定現在人在家目錄下
$ cd /home/aruntu

把放在/home/git/repositories/gitolite-admin.git這個權限倉庫複製下來
指令是
$ git clone git@localhost:gitolite-admin.git
也可以是
$ git clone ssh://git@localhost/gitolite-admin.git
或是
$ git clone ssh://git@localhost:22/gitolite-admin.git
這三行指令的作用是相同的，選一行你喜歡的來執行
我比較喜歡第三種
雖然長一點
但是使用什麼協定，還有TCP port number都有指定
我喜歡清楚一點的方式


還有我再解釋一次為什麼要把它clone下來，設定完之後再推回去origin遠端，才能設定權限
為什麼要這麼麻煩？因為
/home/git/repositories/gitolite-admin.git
它除了是gitolite用來設定權限的倉庫，它還是一個bare git repository
想要對這個倉庫作提交
唯一的方式是把它git clone下來，
複製的倉庫（/home/aruntu/gitolite-admin.git）變成non-bare倉庫，
才能使用git commit指令作提交
git的bare和non-bare倉庫，它們的差別在
bare倉庫就是個裸體倉庫，它沒有工作目錄
而一般我們用來提交代碼的倉庫，都是non-bare倉庫，non-bare repository
詳細差異請自已看git版本控制的相關書籍，這裡只是筆記，不負責教git的概念


一樣還是aruntu用戶身分，把家目錄下的anntony的公鑰，移動到
$ cd /home/aruntu
$ mv anntony.pub gitolite-admin/keydir/

一樣還是aruntu用戶身分，使用vi editor文字編輯器修改這個檔案
$ vi /home/aruntu/gitolite-admin/conf/gitolite.conf 

請改成這樣，現在是在設定剛才我們用git用戶新建的abc.git裸倉庫的權限
repo    gitolite-admin
        RW+     =   admin

repo    testing
        RW+     =   @all

repo    abc
        RW+  a  =   anntony
        RW   b  =   anntony
        R    c  =   anntony

改完之後就存檔
然後暫存、提交、推回原來的origin倉庫（/home/git/repositories/gitolite-admin.git）
指令如下
一樣還是用戶aruntu身分
$ cd /home/aruntu/gitolite-admin
$ git add -A
$ git commit -m "Anntony's priviledges for abc repo"
$ git remote -v
$ git push origin master

要怎樣才能確定真的把剛才的提交推回origin倉庫（/home/git/repositories/gitolite-admin.git）了呢？
簡單啊，就走過去看看
執行以下指令

先變成git用戶
$ sudo su - git

然後到origin倉庫的所在地
$ cd /home/git/repositories/gitolite-admin.git

看看所有的commit，指令是
$ git log --oneline

如果看到下面的輸出
334bf97 Anntony's priviledges for abc repo
c433d9a start

沒錯，origin倉庫（/home/git/repositories/gitolite-admin.git）
有了一個新的commit，是我們剛才作的
這個commit裡面有：我們把anntony.pub這支公鑰給放進keydir
還有我們修改了gitolite.conf
關於分享出的git bare倉庫
也就是位於CubieTruck機器上的
/home/git/repositories/abc.git
我們已經完全設定好權限了
我稍微解釋一下剛才的設定
（複製版的權限倉庫設定檔：路徑是　/home/aruntu/gitolite-admin/conf/gitolite.conf）
repo    abc
        RW+  a  =   anntony
        RW   b  =   anntony
        R    c  =   anntony

這裡規定著abc倉庫的權限
其中anntony用戶
branch a有RW+ (可讀、可寫、可強制寫）
branch b有RW (可讀、可寫、不可以強制寫）
branch c有R (只可以讀）


記得要放在CubieTruck上面控管的git repository都必須要是bare repository
而且都要放在
/home/git/repositories
目錄下，擁有人和群組都必須要是git
權限必須是775（git用戶和git群組都要能讀能寫）


作到這裡請一定要檢查一下
CubieTruck機器上的
/home/git/.ssh/authorized_keys
這個檔案裡面
應該已經記錄了兩把public key
一把是管理員的admin.pub（和CubieTruck機器上的/home/aruntu/.ssh/id_rsa.pub是同一把）
另一把是一般用戶的anntony.pub（和筆記型電腦上的/home/anntony/.ssh/id_rsa.pub是同一把）
稍早前實作的時候
發生了一個情況
我在想也許我不知道漏掉了什麼步驟
在我把權限設定push回origin倉庫
/home/git/repositories/gitolite-admin.git
之後
沒想到我再去檢查
/home/git/.ssh/authorized_keys
這個檔案裡面居然只記錄著管理員的admin.pub
然後這導致我用筆記型電腦的用戶anntony身分，來git clone分享出的abc.git倉庫的時候
一直被要求要輸入git用戶的密碼
煩人的不只是這樣
一般使用這樣的指令，就可以把CubieTruck機器上分享的git repository給複製到本地
（分享出的abc.git倉庫的路徑在 /home/git/repositories/abc.git）
$ git clone ssh://git@192.168.0.161:22/abc.git
但是因為anntony用戶的public key沒有被記錄在CubieTruck機器上的/home/git/.ssh/authorized_keys裡面
導致我除了要輸入git用戶的密碼才能git clone之外，還強迫我一定要用這麼長的指令
$ git clone ssh://git@192.168.0.161:22/home/git/repositories/abc.git
我一定要輸入abc.git倉庫的完整的路徑才能git clone
不要手動想用
$ echo /path/to/anntony.pub >> /home/git/.ssh/authorized_keys
這樣的指令去手動把anntony用戶的公鑰給加到/home/git/.ssh/authorized_keys
不應該是這樣手動搞的
請照著上面的步驟，把anntony.pub複製進keydir
（複製anntony.pub到/home/aruntu/gitolite-admin/keydir/）
修改/home/aruntu/gitolite-admin/conf/gitolite-conf設定檔
然後git commit再git push回原來的倉庫（/home/git/repositories/gitolite-admin.git）
這才是正規的作法
這樣子作的話
/home/git/.ssh/authorized_keys
就會出現剛才你提交的anntony.pub這一把公鑰
簡單的說
如果在你作完上面對gitolite-admin裸倉庫的權限設定之後
你的
/home/git/.ssh/authorized_keys
應該要記錄著兩把公鑰
一把是admin.pub
另一把是anntony.pub
才對
如果少了任何一把公鑰
那麼稍後git clone指令
可能就會產生詭異的行為
屁如一直問你git用戶的密碼
要不就是裝死說它不知道abc.git在那裡
一定要你輸入完整的路徑
一定要你下這麼長的指令才能clone
$ git clone ssh://git@192.168.0.161:22/home/git/repositories/abc.git


接著我們來實驗一下剛才gitolite裡面設定的權限有沒有生效？
首先把CubieTruck機器上分享出來的名為abc.git的bare repository複製到本地（筆記型電腦）
我現在的身分是anntony用戶

切換到/tmp目錄
$ cd /tmp

把CubieTruck機器上面分享出來的abc.git倉庫給clone到本地（筆記型電腦）
再次強調我現在是用戶anntony的身分
$ git clone ssh://git@192.168.0.161:22/abc.git

如果用戶anntony想要複製CubieTruck機器上的gitolite-admin.git倉庫，有可能嗎？試試
$ git clone ssh://git@192.168.0.161:22/gitolite-admin.git

不行，你會踢到鐵板，會出現這個訊息
Cloning into 'gitolite-admin'...
R access for gitolite-admin DENIED to anntony
(Or there may be no repository at the given path. Did you spell it correctly?)
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.


因為我們在CubieTruck機器上安裝的gitolite套件
它認定aruntu用戶才是所有git repositories的管理員
更準確的說，是所有路徑在/home/git/repositories目錄下的git repositories的管理員
好吧現在要進入剛才複製到本地的空倉庫abc了
進終端機，一樣是以用戶anntony身分執行指令

進入abc倉庫
$ cd /tmp/abc

看看裡面有什麼？
$ git log --oneline

然後終端機會告訴你
fatal: bad default revision 'HEAD'

什麼都沒有，
因為這是個空空如也什麼commit都沒有的倉庫

接著執行
$ echo "m1" >> m1.txt ; git add -A ; git commit -m "m1"
$ echo "m2" >> m2.txt ; git add -A ; git commit -m "m2"
$ echo "m3" >> m3.txt ; git add -A ; git commit -m "m3"

然後再看看倉庫裡有什麼？
$ git log --oneline --graph --decorate --all

然後終端機回答
* b05e8cd (HEAD, master) m3
* 8a015f5 m2
* 13da66c m1

這個回答說明，我現在的HEAD在master分支上，我有3個commit

然後我要開一個新的分支a
$ git branch a

看看我的倉庫現在有什麼分支？
$ git branch -avv

然後終端機回答
  a      b05e8cd m3
* master b05e8cd [origin/master: gone] m3

雖然我已經開了新的分支a，但是我的人還是在master分支上
那就執行指令切換到分支a
$ git checkout a

再看看我現在人在那一個分支上？
$ git branch

終端機回答
* a
  master

這表示我人現在正在分支a上面
那我繼續作提交了，在終端機執行
$ echo "a1" >> a1.txt ; git add -A ; git commit -m "a1"
$ echo "a2" >> a2.txt ; git add -A ; git commit -m "a2"
$ echo "a3" >> a3.txt ; git add -A ; git commit -m "a3"

然後再看看現在倉庫裡的分支圖長得怎樣？
$ git log --oneline --graph --decorate --all

終端機打印
* 220a4dd (HEAD, a) a3
* bdb5f24 a2
* d3b9ca6 a1
* b05e8cd (master) m3
* 8a015f5 m2
* 13da66c m1

基本上還是算一條直線，即使到m3有一個折角
這個輸出告訴我們
master分支：m1 -> m2 -> m3
a分支：m1 -> m2 -> m3 -> a1 -> a2 -> a3
master分支是a分支的子集

剛才在權限倉庫gitolite-admin裡面
我們規定anntony用戶可以對分支a的權限是RW+
也就是可以R（讀）可以W（寫）還可以+（強制寫）
那我們來試試看對CubieTruck機器上的abc.git倉庫
寫入分支a的提交試試，一樣是anntony身分，執行
$ git push origin a

終端機回答
Counting objects: 18, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (18/18), 1.22 KiB | 0 bytes/s, done.
Total 18 (delta 4), reused 0 (delta 0)
To ssh://git@192.168.0.161:22/abc.git
 * [new branch]      a -> a

哦，成功了嗎？我在筆記型電腦上作push，真的推回CubieTruck機器上的abc.git倉庫了嗎？
如果有疑問，就是到CubieTruck機器上的abc.git倉庫裡看看
路徑是/home/git/repositories/abc.git
到CubieTruck機器上

先變成root身分
$ sudo -i

再變成git用戶的身分
# su - git

然後到abc.git倉庫的目錄裡
$ cd /home/git/repositories/abc.git

打印一下倉庫裡的分支圖
$ git log --oneline --graph --decorate --all

結果終端機輸出了
* 220a4dd (a) a3
* bdb5f24 a2
* d3b9ca6 a1
* b05e8cd m3
* 8a015f5 m2
* 13da66c m1


哇靠，真的把a分支推回原來分享的地方了
（也就是CubieTruck機器上的/home/git/repositories/abc.git）

那麼回到筆記型電腦，我們剛才複製版的abc倉庫裡
現在我們來實驗一下，用戶anntony到底可不可以強制寫？
強制寫？那是什麼？
剛才我們在CubieTruck機器上，看到了分支a其實是
m1 -> m2 -> m3 -> a1 -> a2 -> a3
總共有6個提交
那如果我現在想要讓CubieTruck機器上的abc.git倉庫的分支a
變成只有5個提交
也就是
m1 -> m2 -> m3 -> a1 -> a2
我想要讓a3提交變不見，就是「強制寫」
首先我們在筆記型電腦上
剛才clone下來的abc倉庫的目錄（/tmp/abc）裡，以anntony身分執行

動手前先確認倉庫裡的分支圖長得怎樣？
$ git log --oneline --graph --decorate --all

終端機輸出了
* 220a4dd (HEAD, origin/a, a) a3
* bdb5f24 a2
* d3b9ca6 a1
* b05e8cd (master) m3
* 8a015f5 m2
* 13da66c m1

然後我把HEAD放到前一個提交，也就是HEAD~
$ git reset --hard HEAD~

終端機回應，現在你的HEAD在a2
HEAD is now at bdb5f24 a2

再次確認倉庫裡的分支圖
$ git log --oneline --graph --decorate --all

終端機打印了
* 220a4dd (origin/a) a3
* bdb5f24 (HEAD, a) a2
* d3b9ca6 a1
* b05e8cd (master) m3
* 8a015f5 m2
* 13da66c m1

上面的終端機訊息告訴我們
在遠端倉庫origin（放在CubieTruck機器上的/home/git/repositories/abc.git）裡的分支a
有這樣的提交歷史
m1 -> m2 -> m3 -> a1 -> a2 -> a3
然後在本地端（筆記型電腦的/tmp/abc）裡的分支a
有這樣的提交歷史
m1 -> m2 -> m3 -> a1 -> a2
而且現在HEAD是放在a2的地方

簡單來說
上面的訊息告訴我們
origin倉庫的分支a有6個提交
本地倉庫的分支a只有5個提交
那麼現在如果要作強制寫
就是讓origin倉庫的分支a也只剩下5個提交
在筆記型電腦上以anntony用戶身分，在/tmp/abc目錄裡執行以下指令
$ git push -f origin a

終端機回應了
Total 0 (delta 0), reused 0 (delta 0)
To ssh://git@192.168.0.161:22/abc.git
 + 220a4dd...bdb5f24 a -> a (forced update)

強制更新成功，可是還是有點懷疑
所以再回到CubieTruck機器上的
/home/git/repositories/abc.git
看一下是不是只剩5個提交？

變成root身分
$ sudo -i

再變成git用戶身分
# su - git

切換到abc.git倉庫的目錄
$ cd /home/git/repositories/abc.git

打印倉庫裡的分支圖
$ git log --oneline --graph --decorate --all

然後終端機打印了
* bdb5f24 (a) a2
* d3b9ca6 a1
* b05e8cd m3
* 8a015f5 m2
* 13da66c m1

帥哦，真的被強制寫了
本來CubieTruck機器上分享出的abc.git倉庫裡的分支a有6個提交
m1 -> m2 -> m3 -> a1 -> a2 -> a3
現在被強制寫之後，只剩5個提交
m1 -> m2 -> m3 -> a1 -> a2

再回到筆記型電腦上的/tmp/abc目錄（複製的abc.git倉庫的目錄）
剛才執行強制寫的指令之後
我想再看看本地倉庫裡的分支圖，所以我又執行了
$ git log --oneline --graph --decorate --all

然後終端機輸出了
* bdb5f24 (HEAD, origin/a, a) a2
* d3b9ca6 a1
* b05e8cd (master) m3
* 8a015f5 m2
* 13da66c m1

上面的訊息告訴我們
HEAD, origin/a, a
都指向提交a2的地方


